package ${package}.service.impl;

import cn.hutool.core.collection.CollectionUtil;
import ${package}.model.${classEntity};
import ${package}.service.${ClassName}Service;
import ${package}.mapper.${ClassName}Mapper;
import com.jjh.common.exception.BusinessException;
import com.jjh.common.util.IdGenerateHelper;
import com.jjh.common.util.PojoUtils;
import com.jjh.common.web.form.PageRequestForm;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.util.List;

/**
 * ${tableComment} 服务层实现
 *
 * @author ${author}
 * @date ${datetime}
 */
@Service
public class ${ClassName}ServiceImpl implements ${ClassName}Service {

    @Resource
    private ${ClassName}Mapper ${className}Mapper;


    /**
     * 查询${tableComment}列表
     *
     * @param form 查询条件
     * @return ${tableComment}集合
     */
    @Override
    public List<${classEntity}> list(PageRequestForm<${classEntity}> form) {
        return ${className}Mapper.selectList(form.pageWrapper());
    }

    /**
     * 新增${tableComment}对象
     *
     * @param entity 待新增对象
     * @return ${tableComment}对象
     */
    @Transactional(rollbackFor = Exception.class)
    @Override
    public ${classEntity} add(${classEntity} entity) {
        entity.setId(IdGenerateHelper.nextId());
        ${className}Mapper.insert(entity);
        return entity;
    }

    /**
     * 更新${tableComment}对象
     *
     * @param entity 待更新对象
     * @return ${tableComment}对象
     */
    @Transactional(rollbackFor = Exception.class)
    @Override
    public ${classEntity} update(${classEntity} entity) {
        ${classEntity} oldEntity = ${className}Mapper.selectById(entity.getId());
        if (oldEntity == null) {
            throw new BusinessException("对象不存在，请检查");
        }
        //对象属性复制
        PojoUtils.copyPropertiesIgnoreNull(entity, oldEntity);
        ${className}Mapper.updateById(oldEntity);
        return oldEntity;
    }

    /**
     * 删除${tableComment}对象
     *
     * @param ids 需要删除的数据ID
     * @return 结果
     */
    @Transactional(rollbackFor = Exception.class)
    @Override
    public boolean del(String ids) {
        ${className}Mapper.deleteBatchIds(CollectionUtil.toList(ids.split(",")));
        return true;
    }

#if($importAndExport == true)
    /**
     * 导入数据
     *
     * @param list
     * @param updateSupport 是否更新现有数据
     */
    @Transactional(rollbackFor = Exception.class)
    @Override
    public void importData(List<${classEntity}> list, boolean updateSupport) {
        if (CollectionUtil.isEmpty(list)) {
            throw new BusinessException("待导入数据为空");
        }
        for (${classEntity} entity : list) {
            ${classEntity} oldEntity = ${className}Mapper.selectById(entity.getId());
            if (oldEntity != null) {
                if (Boolean.TRUE.equals(updateSupport)) {
                    PojoUtils.copyPropertiesIgnoreNull(entity, oldEntity);
                    ${className}Mapper.updateById(oldEntity);
                }
                else {
                    throw new BusinessException("存在重复数据，请检查。");
                }
            }
            else {
                entity.setId(IdGenerateHelper.nextId());
                ${className}Mapper.insert(entity);
            }
        }
    }
#end
}
